package com.atlascopco.hunspell;

import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>hunspell</b><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a
 * href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("hunspell")
@Runtime(CRuntime.class)
public class HunspellLibrary {
	static {
		BridJ.register();
	}

	public static final int MAXWORDUTF8LEN = 256;

	/**
	 * Original signature :
	 * <code>Hunhandle* Hunspell_create(const char*, const char*)</code><br>
	 * <i>native declaration : line 5</i>
	 */
	public static native Pointer<HunspellLibrary.Hunhandle> Hunspell_create(
			Pointer<Byte> affpath, Pointer<Byte> dpath);

	/**
	 * Original signature :
	 * <code>Hunhandle* Hunspell_create_key(const char*, const char*, const char*)</code>
	 * <br>
	 * <i>native declaration : line 6</i>
	 */
	public static native Pointer<HunspellLibrary.Hunhandle> Hunspell_create_key(
			Pointer<Byte> affpath, Pointer<Byte> dpath, Pointer<Byte> key);

	/**
	 * Original signature : <code>void Hunspell_destroy(Hunhandle*)</code><br>
	 * <i>native declaration : line 7</i>
	 */
	public static native void Hunspell_destroy(
			Pointer<HunspellLibrary.Hunhandle> pHunspell);

	/**
	 * Original signature :
	 * <code>int Hunspell_spell(Hunhandle*, const char*)</code><br>
	 * <i>native declaration : line 8</i>
	 */
	public static native int Hunspell_spell(
			Pointer<HunspellLibrary.Hunhandle> pHunspell, Pointer<Byte> charPtr1);

	/**
	 * Original signature :
	 * <code>char* Hunspell_get_dic_encoding(Hunhandle*)</code><br>
	 * <i>native declaration : line 9</i>
	 */
	public static native Pointer<Byte> Hunspell_get_dic_encoding(
			Pointer<HunspellLibrary.Hunhandle> pHunspell);

	/**
	 * Original signature :
	 * <code>int Hunspell_suggest(Hunhandle*, char***, const char*)</code><br>
	 * <i>native declaration : line 10</i>
	 */
	public static native int Hunspell_suggest(
			Pointer<HunspellLibrary.Hunhandle> pHunspell,
			Pointer<Pointer<Pointer<Byte>>> slst, Pointer<Byte> word);

	/**
	 * Original signature :
	 * <code>int Hunspell_analyze(Hunhandle*, char***, const char*)</code><br>
	 * <i>native declaration : line 11</i>
	 */
	public static native int Hunspell_analyze(
			Pointer<HunspellLibrary.Hunhandle> pHunspell,
			Pointer<Pointer<Pointer<Byte>>> slst, Pointer<Byte> word);

	/**
	 * Original signature :
	 * <code>int Hunspell_stem(Hunhandle*, char***, const char*)</code><br>
	 * <i>native declaration : line 12</i>
	 */
	public static native int Hunspell_stem(
			Pointer<HunspellLibrary.Hunhandle> pHunspell,
			Pointer<Pointer<Pointer<Byte>>> slst, Pointer<Byte> word);

	/**
	 * Original signature :
	 * <code>int Hunspell_stem2(Hunhandle*, char***, char**, int)</code><br>
	 * <i>native declaration : line 13</i>
	 */
	public static native int Hunspell_stem2(
			Pointer<HunspellLibrary.Hunhandle> pHunspell,
			Pointer<Pointer<Pointer<Byte>>> slst, Pointer<Pointer<Byte>> desc,
			int n);

	/**
	 * Original signature :
	 * <code>int Hunspell_generate(Hunhandle*, char***, const char*, const char*)</code>
	 * <br>
	 * <i>native declaration : line 14</i>
	 */
	public static native int Hunspell_generate(
			Pointer<HunspellLibrary.Hunhandle> pHunspell,
			Pointer<Pointer<Pointer<Byte>>> slst, Pointer<Byte> word,
			Pointer<Byte> word2);

	/**
	 * Original signature :
	 * <code>int Hunspell_generate2(Hunhandle*, char***, const char*, char**, int)</code>
	 * <br>
	 * <i>native declaration : line 15</i>
	 */
	public static native int Hunspell_generate2(
			Pointer<HunspellLibrary.Hunhandle> pHunspell,
			Pointer<Pointer<Pointer<Byte>>> slst, Pointer<Byte> word,
			Pointer<Pointer<Byte>> desc, int n);

	/**
	 * Original signature :
	 * <code>int Hunspell_add(Hunhandle*, const char*)</code><br>
	 * <i>native declaration : line 16</i>
	 */
	public static native int Hunspell_add(
			Pointer<HunspellLibrary.Hunhandle> pHunspell, Pointer<Byte> word);

	/**
	 * Original signature :
	 * <code>int Hunspell_add_with_affix(Hunhandle*, const char*, const char*)</code>
	 * <br>
	 * <i>native declaration : line 17</i>
	 */
	public static native int Hunspell_add_with_affix(
			Pointer<HunspellLibrary.Hunhandle> pHunspell, Pointer<Byte> word,
			Pointer<Byte> example);

	/**
	 * Original signature :
	 * <code>int Hunspell_remove(Hunhandle*, const char*)</code><br>
	 * <i>native declaration : line 18</i>
	 */
	public static native int Hunspell_remove(
			Pointer<HunspellLibrary.Hunhandle> pHunspell, Pointer<Byte> word);

	/**
	 * Original signature :
	 * <code>void Hunspell_free_list(Hunhandle*, char***, int)</code><br>
	 * <i>native declaration : line 19</i>
	 */
	public static native void Hunspell_free_list(
			Pointer<HunspellLibrary.Hunhandle> pHunspell,
			Pointer<Pointer<Pointer<Byte>>> slst, int n);

	/**
	 * This interface is simply here to allow BridJ to maintain type-safety.
	 * 
	 * @author Thomas Joiner
	 */
	public static interface Hunhandle {}
}
